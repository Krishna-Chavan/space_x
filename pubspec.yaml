name: space_x
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=3.3.3 <4.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  # Provides access to iOS-style icons for your Flutter app.
  cupertino_icons: ^1.0.6
  # Networking library for making HTTP requests.
  dio: ^5.4.2+1
  # Enables internationalization (i18n) support.
  easy_localization: ^3.0.5
  # The core Flutter framework (required by all Flutter apps).
  flutter:
    sdk: flutter
  # Code generation for freezed classes (used for data modeling).
  freezed_annotation: ^2.4.1
  # Service locator for dependency injection.
  get_it: ^7.6.8
  # Code generation for JSON serialization/deserialization.
  json_annotation: ^4.8.1
  # Pretty-prints HTTP requests and responses for debugging network calls.
  pretty_dio_logger: ^1.3.1
  # Persistent storage for key-value data (e.g., user settings).
  shared_preferences: ^2.2.2
  # Show Svg image
  flutter_svg: ^2.0.10+1
  # simplifies API interaction in Flutter with type-safe interfaces and automatic JSON parsing.
  retrofit: ^4.1.0
  # State management
  flutter_bloc: ^8.1.5
  # show images from the internet and keep them in the cache directory.
  cached_network_image: ^3.3.1
  # This package customizes the default white native splash screen with background color, image, and supports dark mode, full screen
  flutter_native_splash: ^2.4.0
  # A Flutter plugin for launching a URL.
  url_launcher: ^6.2.6
  # Adobe After Effects animations exported as json with Bodymovin and renders them natively on mobile! 
  lottie: ^3.1.2
  # package which contains a collection of some cool and awesome text animations.
  animated_text_kit: ^4.2.2
  # This Flutter plugin provides an API for querying information about an application package.
  package_info_plus: ^8.0.0

dev_dependencies:
  # Builds generated code for freezed and json_annotation.
  build_runner: ^2.4.9
  # The core Flutter testing framework (required for writing unit tests).
  flutter_test:
    sdk: flutter
  # Freezed code generation for development/testing.
  freezed: ^2.4.7
  # JSON serialization/deserialization for development/testing.
  json_serializable: ^6.6.0

  retrofit_generator: '>=7.0.0 <8.0.0'

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^3.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/translations/
    - assets/images/
    - assets/lottie/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  fonts:
    - family: Roboto
      fonts:
        - asset: assets/fonts/Roboto-Regular.ttf
        - asset: assets/fonts/Roboto-Light.ttf
          weight: 300
    - family: RobotoCondensed
      fonts:
        - asset: assets/fonts/RobotoCondensed-Regular.ttf
        - asset: assets/fonts/RobotoCondensed-Medium.ttf
          weight: 500
        - asset: assets/fonts/RobotoCondensed-Bold.ttf
          weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
